searchState.loadedDescShard("vulkan_layer", 0, "This crate provides a convenient framework to develop …\nA trait for the layer implementation to provide metadata …\nThe type that provides information about interception of …\nThe type that holds a <code>Layer::DeviceInfo</code> type. Usually just …\nA wrapper for <code>VkExtensionProperties</code>. Structure specifying …\nA struct that implements all necessarily functions for a …\nA trait for the layer implementation to provide the …\nA trait for the layer implementation to provide metadata …\nThe type that provides information about interception of …\nThe layer implementation has handled this Vulkan command, …\nA type that can be dereferencing to <code>DeviceInfo::HooksType</code>. …\nA type that can be dereferencing to <code>InstanceInfo::HooksType</code>…\nA type that can be dereferencing to …\nThe underlying <code>DeviceHooks</code> type that implements the core …\nThe underlying <code>InstanceHooks</code> type that implements the core …\nThe underlying <code>GlobalHooks</code> type that implements the core …\nA trait for the layer implementation to provide metadata …\nThe type that provides information about interception of …\nThe type that holds a <code>Layer::InstanceInfo</code> type. Usually …\nThe <code>Layer</code> trait provides all layer implementation …\nA Rust bindings of the layer manifest file.\nThe return value of an intercepted Vulkan command by the …\nA stub struct that intercept no commands, which implements …\nA stub struct that intercept no commands, which implements …\nA stub struct that intercept no commands, which implements …\nThe layer implementation doesn’t handle this Vulkan …\nA list node that contains the next entity’s …\nA list node that contains the next entity’s …\nA chain of <code>VkBaseInStructure</code>.\nA chain of <code>VkBaseOutStructure</code>.\nDerive the implementation of the <code>vulkan_layer::DeviceInfo</code> …\nDerive the implementation of the …\nDerive the implementation of the <code>vulkan_layer::InstanceInfo</code>…\nThe factory method for the <code>DeviceInfo</code> type.\nThe logic to intercept the <code>vkCreateInstance</code> function.\nThe logic to intercept the <code>vkCreateInstance</code> function.\nThe factory method for the <code>InstanceInfo</code> type.\nDeclare the required introspection queries for Android …\nA high-level description of the layer and its intended use …\nContains the list of device extension names supported by …\nThe <code>vkEnumerateDeviceExtensionProperties</code> entry point …\nThe <code>vkEnumerateDeviceLayerProperties</code> entry point provided …\nThe <code>vkEnumerateInstanceExtensionProperties</code> entry point …\nThe <code>vkEnumerateInstanceLayerProperties</code> entry point …\nClone the slice to a C style out array with proper <code>VkResult</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>vkGetDeviceProcAddr</code> entry point provided by the layer …\nThe <code>vkGetInstanceProcAddr</code> entry point provided by the …\nReturns a reference of the underlying <code>GlobalHooks</code> object.\nReturns a reference of the underlying <code>GlobalHooks</code> object.\nReturns a reference of the underlying <code>GlobalHooksInfo</code> …\nProvide the reference to the global singleton of <code>Global</code>.\nReturns a slice of Vulkan device functions that the layer …\nReturns a slice of Vulkan instance functions (global …\nReturns a slice of global commands that the layer …\nReturns an iterator of Vulkan device functions that the …\nReturns an iterator of Vulkan device functions that the …\nReturns an iterator of Vulkan instance functions (global …\nReturns an iterator of Vulkan instance functions (global …\nReturns the reference of the <code>DeviceInfo::HooksType</code>.\nReturns the reference of the <code>InstanceInfo::HooksType</code>.\nReturns the reference of the <code>GlobalHooksInfo::HooksType</code>.\nThe version of the layer implemented.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess to the underlying <code>T</code>.\nReturns the layer manifest to the layer framework.\nThe name of the extension.\nThe string used to uniquely identify this layer to …\n<code>spec_version</code> is the version of this extension. It is an …\nThe <code>VkLayerProperties::specVersion</code> field. The <code>&quot;api_version&quot;</code>…\nUtilities used in the integration tests of this crate.\nVulkan layer utilities that are used in the integration …\nA thread-safe reference-counting pointer, but with a …\nA wrapper for T but with a user defined deleter. ‘Del’ …\nA trait to provide an extra meaningful constructor for …\nA mock struct that implements the <code>DeviceInfo</code> trait.\nA mock struct that implements the <code>GlobalHooksInfo</code> trait.\nA mock struct that implements the <code>InstanceInfo</code> trait.\nTest layer tags to distinguish different <code>TestLayer</code>. …\nThe container of the static resources related to …\nThe builder for <code>TestGlobal</code>.\nThe mock for the <code>Layer</code> trait.\nA set of interfaces that the integration tests are …\nA trait used to include all possible <code>Tag&lt;I&gt;</code>.\nThe associated type that implements the <code>Layer</code> trait. …\nSub type of structure for instance and device loader ext …\nA list node that contains the next entity’s …\nBindings for the C <code>VkLayerFunction</code> type defined in the …\nSub type of structure for instance and device loader ext …\nConstruct the <code>TestGlobal&lt;T&gt;</code>.\nCreate the builder for initialization.\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate a context for expectations for the static object.\nCreate an <code>Expectation</code> for mocking the <code>drop</code> method\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>manifest</code> method\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA <code>VkLayerFunction</code> value identifying the payload in the <code>u</code> …\nGet the <code>DeviceInfo</code> mock from a <code>VkDevice</code>.\nGet the <code>InstanceInfo</code> mock from a <code>VkInstance</code>.\nUsed to mock <code>DeviceInfo::hooked_commands</code>.\nUsed to mock <code>GlobalHooksInfo::hooked_commands</code>.\nUsed to mock <code>InstanceInfo::hooked_commands</code>.\nUsed to mock <code>Layer::global_instance</code>.\nCreate a <code>Context</code> for mocking the <code>instance</code> method\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to mock <code>Layer::manifest</code>.\nUsed to obtain the singleton of this object.\nCreate a <code>Context</code> for mocking the <code>mock</code> method\nThe mock of the <code>GlobalHooks</code> trait.\nThe mock of the <code>InstanceHooks</code>.\nThe mock of the <code>DeviceHooks</code>.\nConstructs a new <code>Del&lt;T&gt;</code> with a custom deleter.\nConstructs a new <code>ArcDel&lt;T&gt;</code> with a custom deleter.\nCreate a new mock object with no expectations.\nCreate a new mock object with no expectations.\nEither <code>NULL</code> or a pointer to a structure extending this …\nA <code>VkStructureType</code> value identifying this struct. Must be …\nSet the default behavior of the <code>MockTestLayer</code>: intercept …\nSpecify how <code>Global&lt;TestLayer&lt;T&gt;&gt;</code> should be created.\nSpecify how <code>MockTestLayer</code> should be created.\nCreate a <code>LayerManifest</code> with reasonable fields.\nThe actual payload.\nMock the drop behavior.\nMock the drop behavior.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods taking a <code>&amp;self</code> argument and …\nCall this <code>Expectation</code> as if it were the real method.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a reference to a constant value from the <code>Expectation</code>\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods taking a <code>&amp;self</code> argument and …\nCall this <code>Expectation</code> as if it were the real method.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a reference to a constant value from the <code>Expectation</code>\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods taking a <code>&amp;self</code> argument and …\nCall this <code>Expectation</code> as if it were the real method.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a reference to a constant value from the <code>Expectation</code>\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nManages the context for expectations of static methods.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nLike an <code>&amp;Expectation</code> but protected by a Mutex guard.  …\nVerify that all current expectations for this method are …\nCreate a new expectation for this method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nJust like <code>Expectation::in_sequence</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nJust like <code>Expectation::never</code>\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nJust like <code>Expectation::once</code>\nReturn a constant value from the <code>Expectation</code>\nJust like <code>Expectation::return_const</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nJust like <code>Expectation::return_const_st</code>\nSupply an <code>FnOnce</code> closure that will provide the return …\nJust like <code>Expectation::return_once</code>\nSingle-threaded version of <code>return_once</code>.  This is useful for\nJust like <code>Expectation::return_once_st</code>\nSupply a closure that will provide the return value for …\nJust like <code>Expectation::returning</code>\nSingle-threaded version of <code>returning</code>. Can be used when the …\nJust like <code>Expectation::returning_st</code>\nRestrict the number of times that that this method may be …\nJust like <code>Expectation::times</code>\nSet matching criteria for this Expectation.\nJust like <code>Expectation::with</code>\nSet a matching function for this Expectation.\nJust like <code>Expectation::withf</code>\nSingle-threaded version of <code>withf</code>. Can be used when the …\nJust like <code>Expectation::withf_st</code>\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nManages the context for expectations of static methods.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nLike an <code>&amp;Expectation</code> but protected by a Mutex guard.  …\nVerify that all current expectations for this method are …\nCreate a new expectation for this method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nJust like <code>Expectation::in_sequence</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nJust like <code>Expectation::never</code>\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nJust like <code>Expectation::once</code>\nReturn a constant value from the <code>Expectation</code>\nJust like <code>Expectation::return_const</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nJust like <code>Expectation::return_const_st</code>\nSupply an <code>FnOnce</code> closure that will provide the return …\nJust like <code>Expectation::return_once</code>\nSingle-threaded version of <code>return_once</code>.  This is useful for\nJust like <code>Expectation::return_once_st</code>\nSupply a closure that will provide the return value for …\nJust like <code>Expectation::returning</code>\nSingle-threaded version of <code>returning</code>. Can be used when the …\nJust like <code>Expectation::returning_st</code>\nRestrict the number of times that that this method may be …\nJust like <code>Expectation::times</code>\nSet matching criteria for this Expectation.\nJust like <code>Expectation::with</code>\nSet a matching function for this Expectation.\nJust like <code>Expectation::withf</code>\nSingle-threaded version of <code>withf</code>. Can be used when the …\nJust like <code>Expectation::withf_st</code>\nVulkan API version number.\nThe CheckEmpty trait allows to check if a collection is …\nVulkan core API interface.\nVulkan extension interface.\nA union type of extensions and core API version.\nUsed to extend an iterator of <code>Feature</code>.\nA collection wrapper, that guarantees that an empty …\nVulkan version 1.0. The initial release of the Vulkan API.\nVulkan version 1.1.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the reference to the underlying collection. Returns …\nGets a mutable reference to the underlying collection, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a list of <code>Feature</code>s where the command is defined, the …\nReturns <code>true</code> if the collection contains no elements.\nThe major version number. At most 7 bits.\nThe minor version number. At most 10 bits\nCreates a new <code>LazyCollection</code> containing <code>value</code>.")