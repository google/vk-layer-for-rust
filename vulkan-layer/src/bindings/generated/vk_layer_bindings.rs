// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub type PFN_GetPhysicalDeviceProcAddr = ::std::option::Option<
    unsafe extern "C" fn(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
impl VkNegotiateLayerStructType {
    pub const LAYER_NEGOTIATE_UNINTIALIZED: VkNegotiateLayerStructType =
        VkNegotiateLayerStructType(0);
}
impl VkNegotiateLayerStructType {
    pub const LAYER_NEGOTIATE_INTERFACE_STRUCT: VkNegotiateLayerStructType =
        VkNegotiateLayerStructType(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VkNegotiateLayerStructType(pub ::std::os::raw::c_uint);
#[repr(C)]
pub struct VkNegotiateLayerInterface {
    pub sType: VkNegotiateLayerStructType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub loaderLayerInterfaceVersion: u32,
    pub pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddr,
    pub pfnGetDeviceProcAddr: PFN_vkGetDeviceProcAddr,
    pub pfnGetPhysicalDeviceProcAddr: PFN_GetPhysicalDeviceProcAddr,
}
#[test]
fn bindgen_test_layout_VkNegotiateLayerInterface() {
    const UNINIT: ::std::mem::MaybeUninit<VkNegotiateLayerInterface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkNegotiateLayerInterface>(),
        48usize,
        concat!("Size of: ", stringify!(VkNegotiateLayerInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<VkNegotiateLayerInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(VkNegotiateLayerInterface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaderLayerInterfaceVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(loaderLayerInterfaceVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetInstanceProcAddr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(pfnGetInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetDeviceProcAddr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(pfnGetDeviceProcAddr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnGetPhysicalDeviceProcAddr) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(pfnGetPhysicalDeviceProcAddr)
        )
    );
}
impl Default for VkNegotiateLayerInterface {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl VkLayerFunction_ {
    pub const VK_LAYER_LINK_INFO: VkLayerFunction_ = VkLayerFunction_(0);
}
impl VkLayerFunction_ {
    pub const VK_LOADER_DATA_CALLBACK: VkLayerFunction_ = VkLayerFunction_(1);
}
impl VkLayerFunction_ {
    pub const VK_LOADER_LAYER_CREATE_DEVICE_CALLBACK: VkLayerFunction_ = VkLayerFunction_(2);
}
impl VkLayerFunction_ {
    pub const VK_LOADER_FEATURES: VkLayerFunction_ = VkLayerFunction_(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VkLayerFunction_(pub ::std::os::raw::c_uint);
pub use self::VkLayerFunction_ as VkLayerFunction;
#[repr(C)]
pub struct VkLayerInstanceLink_ {
    pub pNext: *mut VkLayerInstanceLink_,
    pub pfnNextGetInstanceProcAddr: PFN_vkGetInstanceProcAddr,
    pub pfnNextGetPhysicalDeviceProcAddr: PFN_GetPhysicalDeviceProcAddr,
}
#[test]
fn bindgen_test_layout_VkLayerInstanceLink_() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerInstanceLink_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerInstanceLink_>(),
        24usize,
        concat!("Size of: ", stringify!(VkLayerInstanceLink_))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerInstanceLink_>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerInstanceLink_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceLink_),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextGetInstanceProcAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceLink_),
            "::",
            stringify!(pfnNextGetInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnNextGetPhysicalDeviceProcAddr) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceLink_),
            "::",
            stringify!(pfnNextGetPhysicalDeviceProcAddr)
        )
    );
}
impl Default for VkLayerInstanceLink_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkLayerInstanceLink = VkLayerInstanceLink_;
pub type PFN_vkSetInstanceLoaderData = ::std::option::Option<
    unsafe extern "C" fn(instance: VkInstance, object: *mut ::std::os::raw::c_void) -> VkResult,
>;
pub type PFN_vkSetDeviceLoaderData = ::std::option::Option<
    unsafe extern "C" fn(device: VkDevice, object: *mut ::std::os::raw::c_void) -> VkResult,
>;
pub type PFN_vkLayerCreateDevice = ::std::option::Option<
    unsafe extern "C" fn(
        instance: VkInstance,
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
        layerGIPA: PFN_vkGetInstanceProcAddr,
        nextGDPA: *mut PFN_vkGetDeviceProcAddr,
    ) -> VkResult,
>;
pub type PFN_vkLayerDestroyDevice = ::std::option::Option<
    unsafe extern "C" fn(
        physicalDevice: VkDevice,
        pAllocator: *const VkAllocationCallbacks,
        destroyFunction: PFN_vkDestroyDevice,
    ),
>;
#[repr(C)]
pub struct VkLayerInstanceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub function: VkLayerFunction,
    pub u: VkLayerInstanceCreateInfo__bindgen_ty_1,
}
#[repr(C)]
pub struct VkLayerInstanceCreateInfo__bindgen_ty_1 {
    pub pLayerInfo: __BindgenUnionField<*mut VkLayerInstanceLink>,
    pub pfnSetInstanceLoaderData: __BindgenUnionField<PFN_vkSetInstanceLoaderData>,
    pub layerDevice: __BindgenUnionField<VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1>,
    pub loaderFeatures: __BindgenUnionField<VkLoaderFeatureFlags>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1 {
    pub pfnLayerCreateDevice: PFN_vkLayerCreateDevice,
    pub pfnLayerDestroyDevice: PFN_vkLayerDestroyDevice,
}
#[test]
fn bindgen_test_layout_VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnLayerCreateDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pfnLayerCreateDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnLayerDestroyDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pfnLayerDestroyDevice)
        )
    );
}
#[test]
fn bindgen_test_layout_VkLayerInstanceCreateInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerInstanceCreateInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerInstanceCreateInfo__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerInstanceCreateInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLayerInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(pLayerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetInstanceLoaderData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(pfnSetInstanceLoaderData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(layerDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaderFeatures) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(loaderFeatures)
        )
    );
}
impl Default for VkLayerInstanceCreateInfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_VkLayerInstanceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerInstanceCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerInstanceCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkLayerInstanceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerInstanceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerInstanceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo),
            "::",
            stringify!(u)
        )
    );
}
impl Default for VkLayerInstanceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct VkLayerDeviceLink_ {
    pub pNext: *mut VkLayerDeviceLink_,
    pub pfnNextGetInstanceProcAddr: PFN_vkGetInstanceProcAddr,
    pub pfnNextGetDeviceProcAddr: PFN_vkGetDeviceProcAddr,
}
#[test]
fn bindgen_test_layout_VkLayerDeviceLink_() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerDeviceLink_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerDeviceLink_>(),
        24usize,
        concat!("Size of: ", stringify!(VkLayerDeviceLink_))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerDeviceLink_>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerDeviceLink_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceLink_),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextGetInstanceProcAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceLink_),
            "::",
            stringify!(pfnNextGetInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextGetDeviceProcAddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceLink_),
            "::",
            stringify!(pfnNextGetDeviceProcAddr)
        )
    );
}
impl Default for VkLayerDeviceLink_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkLayerDeviceLink = VkLayerDeviceLink_;
#[repr(C)]
pub struct VkLayerDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub function: VkLayerFunction,
    pub u: VkLayerDeviceCreateInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkLayerDeviceCreateInfo__bindgen_ty_1 {
    pub pLayerInfo: *mut VkLayerDeviceLink,
    pub pfnSetDeviceLoaderData: PFN_vkSetDeviceLoaderData,
}
#[test]
fn bindgen_test_layout_VkLayerDeviceCreateInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerDeviceCreateInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerDeviceCreateInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(VkLayerDeviceCreateInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerDeviceCreateInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkLayerDeviceCreateInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLayerInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(pLayerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetDeviceLoaderData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(pfnSetDeviceLoaderData)
        )
    );
}
impl Default for VkLayerDeviceCreateInfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_VkLayerDeviceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerDeviceCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerDeviceCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkLayerDeviceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerDeviceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerDeviceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo),
            "::",
            stringify!(u)
        )
    );
}
impl Default for VkLayerDeviceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
